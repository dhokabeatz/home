generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model User {
  id          String   @id @default(cuid())
  email       String   @unique
  password    String
  firstName   String
  lastName    String
  role        String   @default("USER") // "ADMIN" or "USER"
  isActive    Boolean  @default(true)
  avatar      String?
  aboutImage  String?
  cvUrl       String?
  phone       String?
  location    String?
  lastLogin   DateTime?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  contacts      Contact[]
  notifications Notification[]
  purchases     ProjectPurchase[]
  settings      UserSettings?

  @@map("users")
}model UserSettings {
  id                   String   @id @default(cuid())
  userId               String   @unique
  emailNotifications   Boolean  @default(true)
  browserNotifications Boolean  @default(false)
  newContactMessages   Boolean  @default(true)
  projectViews         Boolean  @default(false)
  weeklyReports        Boolean  @default(true)
  securityAlerts       Boolean  @default(true)
  twoFactorEnabled     Boolean  @default(false)
  loginAlerts          Boolean  @default(true)
  passwordLastChanged  DateTime @default(now())
  activeSessions       Int      @default(1)
  maintenanceMode      Boolean  @default(false)
  analyticsEnabled     Boolean  @default(true)
  contactFormEnabled   Boolean  @default(true)
  seoTitle             String   @default("Henry Agyemang - Full Stack Developer")
  seoDescription       String   @default("Experienced full-stack developer specializing in React, Node.js, and cloud solutions.")
  aboutHeading         String   @default("About Me")
  aboutSubtitle        String   @default("Full Stack Developer")
  aboutParagraph1      String   @default("Welcome to my portfolio. I am a passionate developer with years of experience.")
  aboutParagraph2      String   @default("I create amazing web applications using modern technologies and best practices.")
  githubUrl            String?
  linkedinUrl          String?
  twitterUrl           String?
  emailUrl             String?
  createdAt            DateTime @default(now())
  updatedAt            DateTime @updatedAt
  user                 User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("user_settings")
}

model Project {
  id              String   @id @default(cuid())
  title           String
  description     String
  longDesc        String?  // Long description for detailed project info
  content         String?
  imageUrl        String?
  githubUrl       String?
  liveUrl         String?
  demoUrl         String?  // Demo/preview URL
  tags            String?  // JSON string array
  status          String   @default("DRAFT") // "DRAFT", "PUBLISHED", "ARCHIVED"
  featured        Boolean  @default(false)
  isPaid          Boolean  @default(false)  // Whether this is a paid/premium project
  currency        String?  // Currency for paid projects (e.g., "USD", "GHS")
  price           Float?   // Price for paid projects
  order           Int      @default(0)
  views           Int      @default(0)
  likes           Int      @default(0)
  downloads       Int      @default(0)
  completionDate  DateTime?
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  technologies Technology[]
  purchases    ProjectPurchase[]
  screenshots  ProjectScreenshot[]

  @@map("projects")
}

model ProjectScreenshot {
  id        String  @id @default(cuid())
  url       String
  alt       String?
  order     Int     @default(0)
  projectId String
  project   Project @relation(fields: [projectId], references: [id], onDelete: Cascade)

  @@map("project_screenshots")
}

model ProjectPurchase {
  id             String   @id @default(cuid())
  amount         Float
  currency       String   @default("GHS")
  status         String   @default("PENDING") // "PENDING", "COMPLETED", "FAILED", "REFUNDED", "CANCELLED"
  paymentGateway String   @default("paystack")
  metadata       String?  // JSON string for additional payment metadata
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  project   Project @relation(fields: [projectId], references: [id], onDelete: Cascade)
  projectId String
  user      User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String

  @@map("project_purchases")
}

model Service {
  id          String   @id @default(cuid())
  title       String
  description String
  icon        String
  isActive    Boolean  @default(true)
  order       Int      @default(0)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@map("services")
}

model Skill {
  id         String   @id @default(cuid())
  name       String
  percentage Int
  category   String
  color      String   @default("#3B82F6")
  isActive   Boolean  @default(true)
  order      Int      @default(0)
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  @@map("skills")
}

model Technology {
  id        String   @id @default(cuid())
  name      String
  isActive  Boolean  @default(true)
  order     Int      @default(0)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  projects Project[]

  @@map("technologies")
}

model TeamMember {
  id        String   @id @default(cuid())
  name      String
  role      String
  bio       String
  image     String
  email     String
  linkedin  String?
  github    String?
  isActive  Boolean  @default(true)
  order     Int      @default(0)
  joinDate  DateTime @default(now())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("team_members")
}

model Contact {
  id          String   @id @default(cuid())
  firstName   String
  lastName    String
  email       String
  subject     String
  message     String
  status      String   @default("UNREAD") // "UNREAD", "READ", "ARCHIVED"
  ipAddress   String?
  userAgent   String?
  referrer    String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  user   User?   @relation(fields: [userId], references: [id], onDelete: SetNull)
  userId String?

  @@map("contacts")
}

model MediaFile {
  id           String   @id @default(cuid())
  filename     String
  originalName String
  mimeType     String
  size         Int
  url          String
  category     String?
  uploadedAt   DateTime @default(now())

  @@map("media_files")
}

model VisitEvent {
  id        String   @id @default(cuid())
  path      String
  ipAddress String
  userAgent String?
  referer   String?
  country   String?
  device    String?
  browser   String?
  os        String?
  sessionId String?
  duration  Int?      // Duration in seconds
  isUnique  Boolean   @default(false) // First time visitor
  isBounce  Boolean   @default(false) // Left after one page
  timestamp DateTime @default(now())

  @@map("visit_events")
}

model VisitAggregate {
  id          String   @id @default(cuid())
  date        DateTime
  path        String?
  visitors    Int      @default(0)
  pageViews   Int      @default(0)
  uniqueVisitors Int   @default(0)
  avgDuration Float?   // Average session duration in seconds
  bounceRate  Float?   // Percentage of single-page sessions
  createdAt   DateTime @default(now())

  @@unique([date, path])
  @@map("visit_aggregates")
}

model TrafficSource {
  id        String   @id @default(cuid())
  date      DateTime
  source    String   // "direct", "search", "social", "referral", "campaign"
  medium    String?  // "organic", "cpc", "social", "referral", "email"
  campaign  String?  // Campaign name if applicable
  visitors  Int      @default(0)
  sessions  Int      @default(0)
  createdAt DateTime @default(now())

  @@unique([date, source, medium, campaign])
  @@map("traffic_sources")
}

model DeviceAnalytics {
  id         String   @id @default(cuid())
  date       DateTime
  deviceType String   // "desktop", "mobile", "tablet"
  browser    String?
  os         String?
  visitors   Int      @default(0)
  sessions   Int      @default(0)
  bounceRate Float?
  avgDuration Float?
  createdAt  DateTime @default(now())

  @@unique([date, deviceType, browser, os])
  @@map("device_analytics")
}

model PageAnalytics {
  id          String   @id @default(cuid())
  date        DateTime
  path        String
  title       String?
  pageViews   Int      @default(0)
  uniqueViews Int      @default(0)
  avgTimeOnPage Float? // Average time in seconds
  exitRate    Float?   // Percentage of exits from this page
  bounceRate  Float?   // Percentage of bounces from this page
  createdAt   DateTime @default(now())

  @@unique([date, path])
  @@map("page_analytics")
}

model UserInteraction {
  id          String   @id @default(cuid())
  sessionId   String
  path        String
  action      String   // "click", "download", "form_submit", "cta_click"
  element     String?  // Element identifier (e.g., "download-cv", "contact-form")
  value       String?  // Additional data (e.g., file name, form data)
  timestamp   DateTime @default(now())

  @@map("user_interactions")
}

model ConversionGoal {
  id        String   @id @default(cuid())
  name      String
  type      String   // "contact_form", "cv_download", "project_view", "cta_click"
  value     String?  // Target value/identifier
  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())
  events    ConversionEvent[]

  @@map("conversion_goals")
}

model ConversionEvent {
  id        String   @id @default(cuid())
  goalId    String
  sessionId String
  path      String
  value     Decimal? // Monetary value if applicable
  timestamp DateTime @default(now())
  goal      ConversionGoal @relation(fields: [goalId], references: [id], onDelete: Cascade)

  @@map("conversion_events")
}

model SuspiciousIp {
  id           String   @id @default(cuid())
  ipAddress    String   @unique
  reason       String
  requestCount Int      @default(1)
  lastSeen     DateTime @default(now())
  createdAt    DateTime @default(now())

  @@map("suspicious_ips")
}

model Notification {
  id        String   @id @default(cuid())
  userId    String
  title     String
  message   String
  type      String   @default("INFO") // "INFO", "SUCCESS", "WARNING", "ERROR", "CONTACT", "SYSTEM"
  isRead    Boolean  @default(false)
  actionUrl String?
  metadata  String?  // JSON string
  createdAt DateTime @default(now())
  readAt    DateTime?
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("notifications")
}

// SQLite doesn't support enums - using string constants instead
