name: Deploy Backend to AWS Lambda

on:
  push:
    branches: [main]
    paths:
      - "backend/**"
      - ".github/workflows/deploy-backend.yml"
  pull_request:
    branches: [main]
    paths:
      - "backend/**"

env:
  AWS_REGION: eu-central-1
  NODE_VERSION: "18"

jobs:
  test:
    runs-on: ubuntu-latest

    defaults:
      run:
        working-directory: ./backend

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: "npm"
          cache-dependency-path: "./backend/package-lock.json"

      - name: Install dependencies
        run: npm ci

      - name: Generate Prisma client
        run: npx prisma generate

      - name: Setup SQLite database
        run: npx prisma migrate dev --name init-test
        env:
          DATABASE_URL: "file:./test.db"

      - name: Run linting
        run: npm run lint

      - name: Run tests
        run: npm run test
        env:
          DATABASE_URL: "file:./test.db"
          JWT_SECRET: test-secret
          NODE_ENV: test

  deploy:
    needs: test
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'

    defaults:
      run:
        working-directory: ./backend

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: "npm"
          cache-dependency-path: "./backend/package-lock.json"

      - name: Install dependencies
        run: npm ci

      - name: Generate Prisma client
        run: npx prisma generate

      - name: Build application
        run: npm run build

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Install Serverless Framework
        run: npm install -g serverless@3.40.0

      - name: Deploy to AWS Lambda
        run: |
          serverless deploy --stage prod --region ${{ env.AWS_REGION }}
        env:
          DATABASE_URL: ${{ secrets.DATABASE_URL }}
          JWT_SECRET: ${{ secrets.JWT_SECRET }}
          # AWS credentials for deployment (GitHub Actions will use these for serverless)
          # But the Lambda function will use IAM roles for S3 access
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_S3_BUCKET_NAME: ${{ secrets.AWS_S3_BUCKET_NAME }}
          EMAIL_HOST: ${{ secrets.EMAIL_HOST }}
          EMAIL_PORT: ${{ secrets.EMAIL_PORT }}
          EMAIL_USER: ${{ secrets.EMAIL_USER }}
          EMAIL_PASS: ${{ secrets.EMAIL_PASS }}
          EMAIL_FROM: ${{ secrets.EMAIL_FROM }}
          PAYSTACK_SECRET_KEY: ${{ secrets.PAYSTACK_SECRET_KEY }}
          FRONTEND_URL: ${{ secrets.FRONTEND_URL }}

      - name: Get API Gateway endpoint
        run: |
          ENDPOINT=$(serverless info --stage prod --region ${{ env.AWS_REGION }} | grep -oP 'https://\S+\.execute-api\.\S+\.amazonaws\.com/prod')
          echo "ðŸš€ Backend deployed successfully!"
          echo "ðŸ“¡ API Gateway Endpoint: $ENDPOINT"
          echo "API_ENDPOINT=$ENDPOINT" >> $GITHUB_OUTPUT

          # Store the endpoint for potential use in other workflows
          echo "::notice title=API Endpoint::$ENDPOINT"
